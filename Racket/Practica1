#lang plai

; Practica 1 - Arroyo Lozano Santiago

;; Predicado que nos dice si un numero es negativo
;; neg?: number -> Boolean
(define (neg? a)
  (if (< a 0)
      #t
      #f))

(neg? -3)

;; Predicado que nos dice si un numero es par
;; esPar?: numner -> boolean
(define (esPar? n)
  (if (= (modulo n 2) 0)
      #t
      #f))

(esPar? -2)

(esPar? 0)

;; Procedimiento que nos devuelve el valor absoluto de un número
;; absoluto: number -> number
(define (absoluto n)
  (if (neg? n)
      (* n -1)
      n))

(absoluto -5)

;; Procedimiento que calcula el area de un cono de base circular
;; area-cono: number number -> number
(define (area-cono d g)
  (define r (/ d 2))
  (+ (*(* pi r) g) (* pi (expt r 2)))) ;; No usamos potencia pues todavía no la definimos

(area-cono 10 15)


;; Procedimiento que eleva el numero a, a la potencia b
;; potencia: number number
(define (potencia a b)
  (cond
   [(> b 0) (* a (potencia a (- b 1)))]
   [(< b 0) (/ 1 (potencia a (* b -1)))]
   [else 1]))

(potencia 2 -3)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Un procedimiento que reciba un número natural n y devuelva la lista ordenada de menor a mayor, de los números menores o iguales a n, desde el cero.
;; menores: number -> (listof number)
(define (menores n)
  (cond
   [(= n 0) 0]
   [else (list (menores (- n 1)) n)]))

(menores 13)

;; Procedimiento que reciba un número natural n y calcule la suma de los primeros n números naturales al cuadrado.
;; suma-cuadrados: number -> number
(define (suma-cuadrados n) (/ (* (* n (+ n 1)) (+ (* 2 n) 1)) 6))

(suma-cuadrados 10)

;; Procedimiento recursivo que reciba un número natural n y calcule la suma de los primeros n números naturales al cuadrado.
;; suma-cuadradosR: number -> number
(define (suma-cuadradosR n)
  (cond
   [(= n 1) 1]
   [else (+ (suma-cuadradosR (- n 1)) (potencia n 2))]))

(suma-cuadrados 10)

;; Predicado que nos dice si un numero m es divisor de otro numero n
;; divisor?: number number -> number
(define (divisor? m n)
 (cond
   [(= (modulo n m) 0) #t]
   [else #f]))

(divisor? 3 81)


;; Procedimiento que determina el día de la semana correspondiente
;; diaSemana: number -> string
(define (diaSemana n)
  (define m (modulo n 7))
  (list-ref (list "Lunes" "Martes" "Miercoles" "Jueves" "Viernes" "Sabado" "Domingo") m))

(diaSemana 0)

(diaSemana 9)




